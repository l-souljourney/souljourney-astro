# CNB 构建配置文件 - 使用官方COS插件
# 采用CNB官方腾讯云COSCMD插件

# 环境变量导入
env:
  imports:
    - https://cnb.cool/l-souljourney/env/-/blob/main/env.yml

# 主分支：生产环境构建+部署
main:
  push:
    - docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build project
          script: |
            echo "🏗️ 开始构建项目..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/
            echo "✅ 项目构建完成"
            
        - name: deploy to cos
          # 使用CNB官方腾讯云COSCMD插件
          uses: public/open-source/tencentyun/coscmd@latest
          with:
            # 使用环境变量中的认证信息
            secret_id: ${{ COS_SECRET_ID }}
            secret_key: ${{ COS_SECRET_KEY }}
            bucket: ${{ COS_BUCKET }}
            region: ${{ COS_REGION }}
            # 上传整个dist目录到COS根目录
            local_path: dist/
            remote_path: /
            # 删除远程多余文件，保持同步
            delete: true
            # 忽略文件
            ignore: "*.log,.git/*"

# 开发分支：仅构建测试
develop:
  push:
    - docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build test
          script: |
            echo "🏗️ 开始构建测试..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/ | head -10
            echo "✅ 构建测试完成"

# Pull Request：快速构建检查
pull_request:
  - docker:
      image: node:18-alpine
      volumes:
        - node_modules:copy-on-write
        - /root/.local/share/pnpm:copy-on-write
        - /root/.cache/pnpm:copy-on-write
    stages:
      - name: quick check
        script: |
          echo "⚡ 开始快速检查..."
          npm install -g pnpm@latest
          pnpm config set registry https://mirrors.cloud.tencent.com/npm/
          time pnpm install --frozen-lockfile
          time pnpm run build
          echo "✅ 快速检查完成" 