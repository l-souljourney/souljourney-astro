# 腾讯云 CNB (Cloud Native Builder) 构建配置文件
# L-Souljourney 博客双线部署配置

# 主分支触发配置
main:
  # Git 推送事件触发
  push:
    - name: astro-blog-deploy
      # 环境变量
      env:
        NODE_ENV: production
        NODE_OPTIONS: --max_old_space_size=4096
        ASTRO_TELEMETRY_DISABLED: "1"
        TZ: Asia/Shanghai
      
      # 构建镜像
      image: node:18
      
      # 构建阶段
      stages:
        # 环境准备阶段
        - name: setup-environment
          script: |
            echo "🚀 开始构建 L-Souljourney 博客..."
            echo "📦 安装 pnpm 包管理器..."
            npm install -g pnpm@latest
            echo "✅ 环境信息:"
            node --version
            npm --version
            pnpm --version
            
        # 依赖安装阶段
        - name: install-dependencies
          script: |
            echo "📚 安装项目依赖..."
            pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        # 项目构建阶段
        - name: build-project
          script: |
            echo "🔨 开始构建 Astro 项目..."
            pnpm build
            echo "📊 构建产物信息:"
            ls -la dist/
            du -sh dist/
            find dist -type f | wc -l | xargs echo "文件数量:"
            echo "✅ 构建完成"
            
        # 部署到 COS
        - name: deploy-to-cos
          image: cnbcool/tencent-cos
          settings:
            bucket: souljourney-1251969283
            region: ap-shanghai
            source: ./dist/
            target: /
            delete_extra: true
            exclude:
              - "*.map"
              - "*.log"
              - ".DS_Store"
            headers:
              "*.html":
                content-type: "text/html; charset=utf-8"
                cache-control: "public, max-age=3600"
              "*.css":
                content-type: "text/css; charset=utf-8"
                cache-control: "public, max-age=31536000"
              "*.js":
                content-type: "application/javascript; charset=utf-8"
                cache-control: "public, max-age=31536000"
              "*.{jpg,jpeg,png,gif,webp,svg,ico}":
                cache-control: "public, max-age=31536000"
              "*.{woff,woff2,ttf,eot}":
                cache-control: "public, max-age=31536000"
                
        # CDN 刷新
        - name: refresh-cdn
          image: cnbcool/tencent-cdn
          settings:
            paths:
              - "/*"
            type: flush
            
        # 同步到 GitHub
        - name: sync-to-github
          when:
            - env:
                present: GITHUB_TOKEN
          script: |
            echo "🔄 开始同步到 GitHub..."
            
            # 配置 Git
            git config --global user.email "cnb-deploy@l-souljourney.cn"
            git config --global user.name "CNB Auto Deploy"
            git config --global init.defaultBranch main
            
            # 同步到 GitHub（触发 Cloudflare Pages）
            echo "📤 推送到 GitHub 仓库..."
            git remote add github https://${GITHUB_TOKEN}@github.com/l-souljourney/souljourney-astro.git 2>/dev/null || true
            git remote set-url github https://${GITHUB_TOKEN}@github.com/l-souljourney/souljourney-astro.git
            git push github main --force
            
            echo "✅ 同步到 GitHub 完成"
            
        # 部署完成通知
        - name: deployment-notification
          script: |
            echo "🎉 博客部署成功！"
            echo "🌐 国内访问: https://blog.l-souljourney.cn"
            echo "🌍 海外访问: 等待 Cloudflare Pages 构建完成"
            echo "📊 本次部署统计:"
            echo "   - 构建时间: $(date)"
            echo "   - Git 提交: $CNB_GIT_COMMIT_SHA"
            echo "   - 分支: $CNB_GIT_REF"
            
      # 缓存配置
      cache:
        paths:
          - node_modules
          - .pnpm-store
        key: pnpm-cache-{{ checksum "pnpm-lock.yaml" }}
        
      # 资源限制
      resources:
        cpu: 2
        memory: 4096
        timeout: 1800  # 30分钟超时

# 开发分支触发配置
develop:
  # Git 推送事件触发（仅构建测试，不部署）
  push:
    - name: astro-blog-test
      env:
        NODE_ENV: development
        ASTRO_TELEMETRY_DISABLED: "1"
      
      image: node:18
      
      stages:
        - name: setup-environment
          script: |
            echo "🧪 开始测试构建..."
            npm install -g pnpm@latest
            
        - name: install-dependencies
          script: |
            echo "📚 安装项目依赖..."
            pnpm install --frozen-lockfile
            
        - name: build-test
          script: |
            echo "🔨 测试构建 Astro 项目..."
            pnpm build
            echo "✅ 测试构建完成"
            
        - name: test-complete
          script: |
            echo "🎯 测试构建成功！"
            echo "📋 构建结果:"
            ls -la dist/
            du -sh dist/
            
      cache:
        paths:
          - node_modules
          - .pnpm-store
        key: pnpm-cache-test-{{ checksum "pnpm-lock.yaml" }}

# Pull Request 事件
"**":
  pull_request:
    - name: pr-build-check
      env:
        NODE_ENV: development
        ASTRO_TELEMETRY_DISABLED: "1"
      
      image: node:18
      
      stages:
        - name: pr-check
          script: |
            echo "🔍 PR 构建检查..."
            npm install -g pnpm@latest
            pnpm install --frozen-lockfile
            pnpm build
            echo "✅ PR 构建检查通过"
            
      cache:
        paths:
          - node_modules
          - .pnpm-store
        key: pnpm-cache-pr-{{ checksum "pnpm-lock.yaml" }}

# 兜底配置 - 其他分支的推送事件
"$":
  push:
    - name: other-branch-build
      env:
        NODE_ENV: development
        ASTRO_TELEMETRY_DISABLED: "1"
      
      image: node:18
      
      stages:
        - name: branch-build-test
          script: |
            echo "🌿 分支构建测试: $CNB_GIT_REF"
            npm install -g pnpm@latest
            pnpm install --frozen-lockfile
            pnpm build
            echo "✅ 分支构建测试完成" 