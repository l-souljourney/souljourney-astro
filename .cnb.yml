# CNB 构建配置文件 - 使用官方COS插件
# 采用CNB官方腾讯云COSCMD插件

# 主分支：生产环境构建+部署
main:
  push:
    - # 从密钥仓库导入环境变量
      imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml
      env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build project
          script: |
            echo "🏗️ 开始构建项目..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/
            echo "✅ 项目构建完成"
            
        - name: test github push
          script: |
            echo "🧪 开始GitHub推送测试 - 验证环境变量导入是否正常"
            
            echo "=== 检查GitHub相关环境变量 ==="
            echo "GITHUB_TOKEN检查:"
            if [ -n "${GITHUB_TOKEN}" ]; then
              echo "  ✅ GITHUB_TOKEN 已设置，长度: ${#GITHUB_TOKEN}"
              echo "  前缀: ${GITHUB_TOKEN:0:10}..."
            else
              echo "  ❌ GITHUB_TOKEN 未设置或为空"
            fi
            
            echo "=== 检查COS环境变量 ==="
            echo "COS_SECRET_ID: ${COS_SECRET_ID:+已设置}"
            echo "COS_SECRET_KEY: ${COS_SECRET_KEY:+已设置}"
            echo "COS_BUCKET: ${COS_BUCKET:-未设置}"
            echo "COS_REGION: ${COS_REGION:-未设置}"
            
            echo "=== 配置GitHub远程仓库 ==="
            git remote -v
            
            # 检查是否已有GitHub远程仓库
            if git remote get-url github 2>/dev/null; then
              echo "GitHub远程仓库已存在"
            else
              echo "添加GitHub远程仓库"
              git remote add github https://github.com/l-souljourney/souljourney-astro.git
            fi
            
            echo "=== 尝试推送到GitHub ==="
            if [ -n "${GITHUB_TOKEN}" ]; then
              echo "使用GitHub Token推送..."
              
              # 设置Git认证
              git config --global user.name "CNB Auto Deploy"
              git config --global user.email "cnb@l-souljourney.cn"
              
              # 使用Token推送
              echo "推送当前分支到GitHub main分支..."
              git push https://${GITHUB_TOKEN}@github.com/l-souljourney/souljourney-astro.git HEAD:main || {
                echo "❌ GitHub推送失败"
                echo "检查Token权限和仓库访问权限"
                exit 1
              }
              
              echo "✅ GitHub推送成功！环境变量导入正常工作"
            else
              echo "❌ GITHUB_TOKEN未设置，无法进行推送测试"
              echo "这证明环境变量导入存在问题"
              exit 1
            fi
            
        - name: debug environment variables
          script: |
            echo "🔍 开始环境变量调试..."
            echo "=== 系统环境变量调试 ==="
            echo "当前用户: $(whoami)"
            echo "当前工作目录: $(pwd)"
            echo "Shell类型: $SHELL"
            
            echo "=== CNB内置环境变量检查 ==="
            echo "CNB: ${CNB:-未设置}"
            echo "CI: ${CI:-未设置}"
            echo "CNB_BUILD_ID: ${CNB_BUILD_ID:-未设置}"
            echo "CNB_REPO_SLUG: ${CNB_REPO_SLUG:-未设置}"
            
            echo "=== 所有环境变量扫描 ==="
            echo "包含GITHUB的环境变量:"
            env | grep -i github | sed 's/=.*/=***/' || echo "未找到包含GITHUB的环境变量"
            
            echo "包含COS的环境变量:"
            env | grep -i cos || echo "未找到包含COS的环境变量"
            
            echo "包含SECRET的环境变量:"
            env | grep -i secret | sed 's/=.*/=***/' || echo "未找到包含SECRET的环境变量"
            
            echo "🔍 环境变量调试完成"
            
        - name: deploy to cos
          # 使用官方腾讯云coscli插件 - 参考demo正确语法
          image: tencentcom/coscli
          script: |
            echo "🚀 开始部署到腾讯云COS..."
            
            # 详细验证环境变量
            echo "=== COS部署阶段环境变量检查 ==="
            echo "当前容器: $(hostname)"
            echo "容器镜像: tencentcom/coscli"
            
            # 逐一检查环境变量
            echo "检查COS_SECRET_ID:"
            if [ -n "${COS_SECRET_ID}" ]; then
              echo "  ✅ COS_SECRET_ID: ${COS_SECRET_ID:0:10}*** (长度: ${#COS_SECRET_ID})"
            else
              echo "  ❌ COS_SECRET_ID: 未设置或为空"
              echo "  详细信息: '${COS_SECRET_ID}'"
            fi
            
            echo "检查COS_SECRET_KEY:"
            if [ -n "${COS_SECRET_KEY}" ]; then
              echo "  ✅ COS_SECRET_KEY: ${COS_SECRET_KEY:0:5}*** (长度: ${#COS_SECRET_KEY})"
            else
              echo "  ❌ COS_SECRET_KEY: 未设置或为空"
              echo "  详细信息: '${COS_SECRET_KEY}'"
            fi
            
            echo "检查COS_BUCKET:"
            if [ -n "${COS_BUCKET}" ]; then
              echo "  ✅ COS_BUCKET: ${COS_BUCKET}"
            else
              echo "  ❌ COS_BUCKET: 未设置或为空"
              echo "  详细信息: '${COS_BUCKET}'"
              echo "  字符数: ${#COS_BUCKET}"
              echo "  十六进制输出: $(echo -n "${COS_BUCKET}" | xxd)"
            fi
            
            echo "检查COS_REGION:"
            if [ -n "${COS_REGION}" ]; then
              echo "  ✅ COS_REGION: ${COS_REGION}"
            else
              echo "  ❌ COS_REGION: 未设置或为空"
              echo "  详细信息: '${COS_REGION}'"
              echo "  字符数: ${#COS_REGION}"
              echo "  十六进制输出: $(echo -n "${COS_REGION}" | xxd)"
            fi
            
            echo "=== 容器内环境变量全扫描 ==="
            echo "所有COS相关变量:"
            env | grep -i cos || echo "未找到COS相关环境变量"
            
            echo "=== 变量导入诊断 ==="
            echo "CNB环境变量导入配置测试..."
            
            # 检查必要环境变量
            missing_vars=""
            [ -z "$COS_SECRET_ID" ] && missing_vars="$missing_vars COS_SECRET_ID"
            [ -z "$COS_SECRET_KEY" ] && missing_vars="$missing_vars COS_SECRET_KEY"
            [ -z "$COS_BUCKET" ] && missing_vars="$missing_vars COS_BUCKET"
            [ -z "$COS_REGION" ] && missing_vars="$missing_vars COS_REGION"
            
            if [ -n "$missing_vars" ]; then
              echo "❌ 环境变量缺失！"
              echo "缺失的变量:$missing_vars"
              echo "请检查CNB密钥仓库配置: https://cnb.cool/l-souljourney/env"
              echo "请检查环境变量导入路径: https://cnb.cool/l-souljourney/env/-/raw/main/env.yml"
              exit 1
            else
              echo "✅ 所有COS环境变量已正确设置"
            fi
            
            # 配置coscli认证
            echo "=== 配置COS认证 ==="
            coscli config set --secret_id "$COS_SECRET_ID" --secret_key "$COS_SECRET_KEY" 
            coscli config add --init-skip=true -b "$COS_BUCKET" -r "$COS_REGION"
            
            # 验证配置
            echo "=== 验证COS配置 ==="
            coscli config show
            
            # 显示构建产物
            echo "=== 构建产物信息 ==="
            echo "构建产物目录内容："
            ls -la dist/
            echo "构建产物大小："
            du -sh dist/
            
            # 上传到COS
            echo "=== 开始上传到COS ==="
            coscli cp dist/ cos://$COS_BUCKET/ -r --exclude "./.git/*"
            
            # 验证上传结果
            echo "=== 验证上传结果 ==="
            coscli ls cos://$COS_BUCKET/ | head -10
            
            echo "✅ COS部署完成"
            echo "🌐 网站已更新到生产环境"

# 开发分支：仅构建测试
develop:
  push:
    - docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build test
          script: |
            echo "🏗️ 开始构建测试..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/ | head -10
            echo "✅ 构建测试完成"

# Pull Request：快速构建检查
pull_request:
  - docker:
      image: node:18-alpine
      volumes:
        - node_modules:copy-on-write
        - /root/.local/share/pnpm:copy-on-write
        - /root/.cache/pnpm:copy-on-write
    stages:
      - name: quick check
        script: |
          echo "⚡ 开始快速检查..."
          npm install -g pnpm@latest
          pnpm config set registry https://mirrors.cloud.tencent.com/npm/
          time pnpm install --frozen-lockfile
          time pnpm run build
          echo "✅ 快速检查完成" 