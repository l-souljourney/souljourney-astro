# CNB 构建配置文件 - 精简生产版本
# SoulJourneyBlog Astro 构建部署

# 主分支：生产环境构建+部署
main:
  push:
    - imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml
      env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: build project
          script: |
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            pnpm install --frozen-lockfile
            pnpm run build
            echo "✅ 构建完成: $(du -sh dist/ | cut -f1)"
            
        - name: deploy to github
          image: alpine/git:latest
          script: |
            if [ -z "${GITHUB_TOKEN}" ]; then
              echo "⚠️  跳过GitHub推送"
              exit 0
            fi
            
            git config --global user.name "CNB Auto Deploy"
            git config --global user.email "cnb@l-souljourney.cn"
            git remote set-url origin "https://${GITHUB_TOKEN}@github.com/l-souljourney/souljourney-astro.git"
            git push origin HEAD:main
            echo "✅ GitHub推送完成"
            
        - name: deploy to cos
          image: tencentcom/coscli:latest
          script: |
            if [ -z "${COS_SECRET_ID}" ] || [ -z "${COS_SECRET_KEY}" ] || [ -z "${COS_BUCKET}" ] || [ -z "${COS_REGION}" ]; then
              echo "❌ COS环境变量不完整"
              exit 1
            fi
            
            coscli config set --secret_id "${COS_SECRET_ID}" --secret_key "${COS_SECRET_KEY}"
            coscli config add --init-skip=true -b "${COS_BUCKET}" -r "${COS_REGION}"
            coscli sync dist/ "cos://${COS_BUCKET}/" --delete --disable-crc64 --recursive
            
            echo "✅ COS部署完成"
            if [ -n "${CDN_DOMAIN}" ]; then
              echo "🌐 访问: https://${CDN_DOMAIN}"
            fi
            
        - name: sync to develop
          image: alpine/git:latest
          script: |
            # 配置Git用户信息
            git config --global user.name "CNB Auto Sync"
            git config --global user.email "auto-sync@l-souljourney.cn"
            
            # 重置远程仓库地址为CNB仓库（避免被前面的GitHub推送步骤影响）
            git remote set-url origin https://cnb.cool/l-souljourney/souljourney-astro.git
            
            # 获取最新的远程分支信息
            git fetch origin
            
            # 切换到develop分支（如果不存在则从main创建）
            git checkout -B develop origin/develop 2>/dev/null || git checkout -b develop origin/main
            
            # 合并main分支的更改到develop分支
            git merge origin/main --no-edit -m "Auto sync: merge main branch changes to develop"
            
            # 推送更新后的develop分支到CNB仓库
            git push origin develop
            
            echo "✅ develop分支已自动同步main分支的最新更改"

# 开发分支：构建测试
develop:
  push:
    - imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml
      env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: build test
          script: |
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            pnpm install --frozen-lockfile
            pnpm run build
            echo "✅ 开发构建完成: $(du -sh dist/ | cut -f1)"

# Pull Request：快速检查
pull_request:
  push:
    - env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: pr build check
          script: |
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            pnpm install --frozen-lockfile
            pnpm run build
            echo "✅ PR构建检查通过"