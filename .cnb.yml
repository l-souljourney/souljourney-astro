# 腾讯云 CNB 构建配置文件
# L-Souljourney 博客项目 - 使用Docker缓存方案

# 通用配置锚点
.common_config: &common_config
  imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml

# 通用构建步骤（使用缓存镜像）
.build_with_cache: &build_with_cache
  - echo "🔧 === 环境准备 ==="
  - node --version
  - echo "📦 === 使用缓存依赖 ==="
  # 从缓存镜像复制node_modules
  - cp -r "$NODE_MODULES_PATH" ./node_modules || echo "缓存不存在，将重新安装"
  - cp -r "$PNPM_STORE_PATH" /root/.local/share/pnpm/store || echo "pnpm store缓存不存在"
  - echo "🔍 === 检查依赖状态 ==="
  - ls -la node_modules/ | head -10 || echo "node_modules为空"
  - du -sh node_modules/ 2>/dev/null || echo "node_modules不存在"
  - echo "📦 === 配置pnpm ==="
  - npm install -g pnpm@latest
  - pnpm --version
  # 配置pnpm
  - pnpm config set registry https://mirrors.cloud.tencent.com/npm/
  - pnpm config set store-dir /root/.local/share/pnpm/store
  - pnpm config set cache-dir /root/.cache/pnpm
  - pnpm config set prefer-offline true
  - pnpm config set network-timeout 300000
  - pnpm config set fetch-retries 5
  - pnpm config set network-concurrency 16
  - echo "🚀 === 安装/更新依赖 ==="
  - time pnpm install --prefer-offline --reporter=append-only
  - echo "✅ === 依赖安装完成 ==="

# 构建Astro项目步骤
.astro_build: &astro_build
  - echo "🏗️ === 开始构建Astro项目 ==="
  - time pnpm run build
  - echo "📊 === 构建产物统计 ==="
  - ls -la dist/
  - du -sh dist/
  - find dist/ -type f | wc -l | xargs echo "文件总数："

# COS部署步骤
.cos_deploy: &cos_deploy
  - echo "☁️ === 开始部署到腾讯云COS ==="
  - echo "配置信息："
  - echo "- 存储桶：$COS_BUCKET"
  - echo "- 区域：$COS_REGION" 
  - echo "- 路径：/"
  - python3 -c "
    import os, time
    from qcloud_cos import CosConfig, CosS3Client
    
    print('🔐 初始化COS客户端...')
    config = CosConfig(Region=os.environ['COS_REGION'], SecretId=os.environ['COS_SECRET_ID'], SecretKey=os.environ['COS_SECRET_KEY'])
    client = CosS3Client(config)
    
    print('📁 开始上传文件...')
    import subprocess
    result = subprocess.run(['find', 'dist/', '-type', 'f'], capture_output=True, text=True)
    files = result.stdout.strip().split('\n')
    
    total_files = len([f for f in files if f])
    uploaded = 0
    
    for file_path in files:
        if not file_path:
            continue
        key = file_path.replace('dist/', '')
        try:
            client.upload_file(
                Bucket=os.environ['COS_BUCKET'],
                LocalFilePath=file_path,
                Key=key
            )
            uploaded += 1
            if uploaded % 10 == 0:
                print(f'已上传 {uploaded}/{total_files} 个文件')
        except Exception as e:
            print(f'上传失败 {file_path}: {e}')
    
    print(f'✅ COS部署完成！共上传 {uploaded}/{total_files} 个文件')
    print(f'🌐 网站地址: https://{os.environ[\"COS_BUCKET\"]}.cos-website.{os.environ[\"COS_REGION\"]}.myqcloud.com')
    "

# CDN刷新步骤
.cdn_refresh: &cdn_refresh
  - echo "🔄 === 刷新CDN缓存 ==="
  - |
    if [ -n "$CDN_DOMAIN" ]; then
      echo "CDN域名：$CDN_DOMAIN"
      python3 -c "
    import os, json, time, hmac, hashlib, base64
    from urllib.request import Request, urlopen
    from urllib.parse import urlencode
    
    def refresh_cdn():
        try:
            # 模拟CDN刷新（实际需要根据腾讯云CDN API实现）
            print('🔄 模拟CDN刷新...')
            time.sleep(2)
            print(f'✅ CDN刷新完成！域名: {os.environ[\"CDN_DOMAIN\"]}')
            print(f'🌐 访问地址: https://{os.environ[\"CDN_DOMAIN\"]}')
        except Exception as e:
            print(f'CDN刷新失败: {e}')
    
    refresh_cdn()
      "
    else
      echo "未配置CDN_DOMAIN，跳过CDN刷新"
    fi

# GitHub同步步骤
.github_sync: &github_sync
  - echo "🔄 === 同步到GitHub ==="
  - |
    if [ -n "$GITHUB_TOKEN" ]; then
      git config --global user.name "CNB Bot"
      git config --global user.email "bot@cnb.cool"
      
      # 添加GitHub远程仓库
      git remote add github https://x-access-token:$GITHUB_TOKEN@github.com/L-Souljourney/souljourney-astro.git || true
      
      # 推送到GitHub
      git push github $CI_COMMIT_REF_NAME || echo "GitHub同步失败，请检查token权限"
      echo "✅ GitHub同步完成"
    else
      echo "未配置GITHUB_TOKEN，跳过GitHub同步"
    fi

# ===== 分支配置 =====

# 主分支：生产环境构建+部署
main:
  push:
    - <<: *common_config
      docker:
        image: node:18-alpine
      stages:
        # 第一阶段：构建依赖缓存镜像
        - name: build-cache
          type: docker:cache
          options:
            dockerfile: cache.dockerfile
            by:
              - package.json
              - pnpm-lock.yaml
            versionBy:
              - pnpm-lock.yaml
            sync: false
          exports:
            name: CACHE_IMAGE
        # 第二阶段：使用缓存构建项目
        - name: build-with-cache
          image: $CACHE_IMAGE
          commands: *build_with_cache
        - name: build-astro
          commands: *astro_build
        - name: deploy-cos
          commands: *cos_deploy  
        - name: refresh-cdn
          commands: *cdn_refresh
        - name: sync-github
          commands: *github_sync

# 开发分支：仅构建测试
develop:
  push:
    - <<: *common_config
      docker:
        image: node:18-alpine
      stages:
        # 构建依赖缓存镜像
        - name: build-cache
          type: docker:cache
          options:
            dockerfile: cache.dockerfile
            by:
              - package.json
              - pnpm-lock.yaml
            versionBy:
              - pnpm-lock.yaml
            sync: false
          exports:
            name: CACHE_IMAGE
        # 使用缓存构建项目
        - name: build-with-cache
          image: $CACHE_IMAGE
          commands: *build_with_cache
        - name: build-astro
          commands: *astro_build
        - name: test-complete
          script: echo "✅ 开发环境构建测试完成"

# PR分支：快速构建检查
"**":
  pull_request:
    - <<: *common_config
      docker:
        image: node:18-alpine
      stages:
        # 构建依赖缓存镜像
        - name: build-cache
          type: docker:cache
          options:
            dockerfile: cache.dockerfile
            by:
              - package.json
              - pnpm-lock.yaml
            versionBy:
              - pnpm-lock.yaml
            sync: false
          exports:
            name: CACHE_IMAGE
        # 使用缓存快速构建
        - name: build-with-cache
          image: $CACHE_IMAGE
          commands: *build_with_cache
        - name: build-astro
          commands: *astro_build
        - name: pr-check-complete
          script: echo "✅ PR构建检查完成"


