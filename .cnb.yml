# CNB 构建配置文件 - 优化生产版本
# SoulJourneyBlog Astro 构建部署

# 主分支：生产环境构建+部署
main:
  push:
    - # 从密钥仓库导入环境变量
      imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml
      env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: build project
          script: |
            echo "🚀 开始构建流程..."
            
            # 环境准备
            echo "📦 安装pnpm并配置镜像源..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            
            # 安装依赖
            echo "📥 安装项目依赖..."
            pnpm install --frozen-lockfile
            
            # 构建项目
            echo "🏗️ 构建Astro项目..."
            pnpm run build
            
            # 验证构建产物
            echo "✅ 构建完成，产物信息:"
            du -sh dist/
            echo "文件数量: $(find dist/ -type f | wc -l)"
            
        - name: deploy to github
          image: alpine/git:latest
          script: |
            echo "📤 推送到GitHub..."
            
            # 检查GitHub Token
            if [ -z "${GITHUB_TOKEN}" ]; then
              echo "⚠️  GITHUB_TOKEN未设置，跳过GitHub推送"
              exit 0
            fi
            
            echo "✅ GitHub Token已设置"
            
            # 配置Git
            git config --global user.name "CNB Auto Deploy"
            git config --global user.email "cnb@l-souljourney.cn"
            git config --global init.defaultBranch main
            
            # 推送到GitHub
            git remote set-url origin "https://${GITHUB_TOKEN}@github.com/l-souljourney/souljourney-astro.git"
            git push origin HEAD:main
            
            echo "✅ GitHub推送完成"
            
        - name: deploy to cos
          image: tencentcom/coscli:latest
          script: |
            echo "☁️ 部署到腾讯云COS..."
            
            # 检查环境变量
            if [ -z "${COS_SECRET_ID}" ] || [ -z "${COS_SECRET_KEY}" ] || [ -z "${COS_BUCKET}" ] || [ -z "${COS_REGION}" ]; then
              echo "❌ COS环境变量不完整："
              echo "COS_SECRET_ID: ${COS_SECRET_ID:+已设置}"
              echo "COS_SECRET_KEY: ${COS_SECRET_KEY:+已设置}"  
              echo "COS_BUCKET: '${COS_BUCKET}'"
              echo "COS_REGION: '${COS_REGION}'"
              exit 1
            fi
            
            echo "✅ COS环境变量检查通过"
            
            # 配置coscli
            echo "🔧 配置COS CLI..."
            coscli config set --secret_id "${COS_SECRET_ID}" --secret_key "${COS_SECRET_KEY}"
            coscli config add --init-skip=true -b "${COS_BUCKET}" -r "${COS_REGION}"
            
            # 验证构建产物
            if [ ! -d "dist" ]; then
              echo "❌ 找不到构建产物目录 dist/"
              exit 1
            fi
            
            echo "📁 构建产物检查:"
            ls -la dist/ | head -10
            echo "产物大小: $(du -sh dist/ | cut -f1)"
            
            # 同步到COS
            echo "📤 同步文件到COS..."
            echo "源目录: dist/"
            echo "目标: cos://${COS_BUCKET}/"
            
            coscli sync dist/ "cos://${COS_BUCKET}/" --delete --disable-crc64
            
            echo "✅ COS部署完成！"
            
            # 显示访问信息
            if [ -n "${CDN_DOMAIN}" ]; then
              echo "🌐 访问地址: https://${CDN_DOMAIN}"
            else
              echo "🌐 COS域名: ${COS_BUCKET}.cos.${COS_REGION}.myqcloud.com"
            fi

# 开发分支：构建测试
develop:
  push:
    - imports: https://cnb.cool/l-souljourney/env/-/blob/main/env.yml
      env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: build test
          script: |
            echo "🧪 开发环境构建测试..."
            
            # 环境准备
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            
            # 安装依赖
            echo "📥 安装依赖..."
            pnpm install --frozen-lockfile
            
            # 构建测试
            echo "🏗️ 构建测试..."
            pnpm run build
            
            echo "✅ 开发环境构建测试通过"
            echo "📊 构建产物: $(du -sh dist/ | cut -f1)"

# Pull Request：快速检查
pull_request:
  push:
    - env:
        TZ: Asia/Shanghai
      
      docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: pr build check
          script: |
            echo "🔍 PR构建检查..."
            
            # 快速构建验证
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            pnpm install --frozen-lockfile
            pnpm run build
            
            echo "✅ PR构建检查通过" 