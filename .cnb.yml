# CNB 构建配置文件 - 使用官方COS插件
# 采用CNB官方腾讯云COSCMD插件

# 环境变量导入
env:
  imports:
    - https://cnb.cool/l-souljourney/env/-/blob/main/env.yml

# 主分支：生产环境构建+部署
main:
  push:
    - docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build project
          script: |
            echo "🏗️ 开始构建项目..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/
            echo "✅ 项目构建完成"
            
        - name: deploy to cos
          # 使用官方腾讯云coscli插件 - 参考demo正确语法
          image: tencentcom/coscli
          script: |
            echo "🚀 开始部署到腾讯云COS..."
            
            # 验证环境变量
            echo "验证COS配置环境变量..."
            echo "COS_SECRET_ID: ${COS_SECRET_ID:0:10}***"
            echo "COS_BUCKET: ${COS_BUCKET}"
            echo "COS_REGION: ${COS_REGION}"
            
            # 配置coscli认证
            coscli config set --secret_id $COS_SECRET_ID --secret_key $COS_SECRET_KEY 
            coscli config add --init-skip=true -b $COS_BUCKET -r $COS_REGION
            
            # 显示构建产物
            echo "构建产物目录内容："
            ls -la dist/
            du -sh dist/
            
            # 上传到COS（清理旧文件并上传新文件）
            echo "开始上传文件到COS..."
            coscli cp dist/ cos://$COS_BUCKET/ -r --exclude "./.git/*"
            
            echo "✅ COS部署完成"
            echo "🌐 网站已更新到生产环境"

# 开发分支：仅构建测试
develop:
  push:
    - docker:
        image: node:18-alpine
        volumes:
          - node_modules:copy-on-write
          - /root/.local/share/pnpm:copy-on-write
          - /root/.cache/pnpm:copy-on-write
      stages:
        - name: setup environment
          script: |
            echo "🚀 开始环境准备..."
            npm install -g pnpm@latest
            pnpm config set registry https://mirrors.cloud.tencent.com/npm/
            echo "✅ 环境准备完成"
            
        - name: install dependencies
          script: |
            echo "📦 开始安装依赖..."
            time pnpm install --frozen-lockfile
            echo "✅ 依赖安装完成"
            
        - name: build test
          script: |
            echo "🏗️ 开始构建测试..."
            time pnpm run build
            echo "📊 构建产物大小:"
            du -sh dist/
            ls -la dist/ | head -10
            echo "✅ 构建测试完成"

# Pull Request：快速构建检查
pull_request:
  - docker:
      image: node:18-alpine
      volumes:
        - node_modules:copy-on-write
        - /root/.local/share/pnpm:copy-on-write
        - /root/.cache/pnpm:copy-on-write
    stages:
      - name: quick check
        script: |
          echo "⚡ 开始快速检查..."
          npm install -g pnpm@latest
          pnpm config set registry https://mirrors.cloud.tencent.com/npm/
          time pnpm install --frozen-lockfile
          time pnpm run build
          echo "✅ 快速检查完成" 